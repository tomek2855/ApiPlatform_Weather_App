{"version":3,"sources":["reportWebVitals.js","components/Layout.js","actions/actionsEnv.js","components/weather/WeatherSidebar.js","actions/weather/cities.js","components/weather/WeatherDetails.js","actions/weather/weather.js","components/weather/Weather.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Layout","children","className","to","actionsEnv","baseUrl","WeatherSidebar","useState","cities","setCities","useEffect","fetch","res","json","data","map","city","index","cityUrl","id","name","WeatherDetails","cityId","setCity","weather","setWeather","lastRecord","setLastRecord","type","label","chartData","setChartData","chartData2","setChartData2","getCityWeather","length","concat","slice","item","Date","createdAt","parseInt","temp","humidity","preesure","toString","tempFeelsLike","windDeg","windSpeed","visibility","style","display","maxWidth","overflowX","overflowY","width","height","chartType","loader","legendToggle","series","1","curveType","Weather","useParams","history","createBrowserHistory","store","createStore","combineReducers","router","connectRouter","form","applyMiddleware","routerMiddleware","thunk","ReactDOM","render","path","component","strict","exact","document","getElementById"],"mappings":"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","file":"static/js/main.48594f94.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport './Layout.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Layout({children}) {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <div className=\"container\">\r\n                    <Link to={\"/\"} className=\"navbar-brand\">Weather</Link>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Layout-children\">\r\n                <div className=\"container\">\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Layout;","const actionsEnv = {\r\n    baseUrl: 'http://weather.toadres.pl/api/'\r\n};\r\n\r\nexport default actionsEnv;","import React, {useEffect, useState} from \"react\";\r\nimport {getCities} from \"../../actions/weather/cities\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction WeatherSidebar() {\r\n    const [cities, setCities] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getCities()\r\n            .then(data => setCities(data));\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <ul className=\"list-group list-group-flush\">\r\n                {cities && cities.map((city, index) => {\r\n                    const cityUrl = \"/weather/\" + city.id;\r\n\r\n                    return (\r\n                        <li className=\"list-group-item\" key={index}>\r\n                            <Link to={cityUrl} className=\"Weather-sidebar-Link\">{city.name}</Link>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherSidebar;","import actionsEnv from \"../actionsEnv\";\r\n\r\nexport function getCities() {\r\n    return fetch(actionsEnv.baseUrl + \"cities\")\r\n        .then(res => res.json())\r\n        .then(json => json[\"hydra:member\"]);\r\n}\r\n\r\nexport function getCity(id) {\r\n    return fetch(actionsEnv.baseUrl + \"cities/\" + id)\r\n        .then(res => res.json());\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {getCity} from \"../../actions/weather/cities\";\r\nimport {getCityWeather} from \"../../actions/weather/weather\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nfunction WeatherDetails(cityId) {\r\n    const [city, setCity] = useState({});\r\n    const [weather, setWeather] = useState([]);\r\n    const [lastRecord, setLastRecord] = useState(null);\r\n    const [chartData, setChartData] = useState([[{type: 'datetime', label: 'Day'}, 'Temperature', 'Humidity']]);\r\n    const [chartData2, setChartData2] = useState([[{type: 'datetime', label: 'Day'}, 'Pressure']]);\r\n\r\n    useEffect(() => {\r\n        if (cityId) {\r\n            getCity(cityId)\r\n                .then(data => setCity(data));\r\n\r\n            getCityWeather(cityId)\r\n                .then(data => setWeather(data));\r\n        }\r\n    }, [cityId]);\r\n\r\n    useEffect(() => {\r\n        setLastRecord(weather.length > 0 && weather[weather.length - 1]);\r\n\r\n        setChartData([[{\r\n            type: 'datetime',\r\n            label: 'Day'\r\n        }, 'Temperature', 'Humidity']].concat(weather.slice(-96).map(item => {\r\n            return [new Date(item.createdAt), parseInt(item.temp - 273.15), item.humidity];\r\n        })));\r\n\r\n        setChartData2([[{\r\n            type: 'datetime',\r\n            label: 'Day'\r\n        }, 'Pressure']].concat(weather.slice(-96).map(item => {\r\n            return [new Date(item.createdAt), item.preesure];\r\n        })));\r\n    }, [weather]);\r\n\r\n    return cityId && (\r\n        <div>\r\n            <h5>{city.name} weather details</h5>\r\n            <hr/>\r\n\r\n            <div>\r\n                <h6>Latest weather data</h6>\r\n\r\n                {lastRecord &&\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-bordered table-sm\">\r\n                        <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>Timestamp</th>\r\n                            <th>Temperature</th>\r\n                            <th>Temperature feels like</th>\r\n                            <th>Pressure</th>\r\n                            <th>Humidity</th>\r\n                            <th>Wind direction</th>\r\n                            <th>Wind speed</th>\r\n                            <th>Visibility</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>{(new Date(lastRecord.createdAt)).toString()}</td>\r\n                            <td>{parseInt(lastRecord.temp - 273.15)}°C</td>\r\n                            <td>{parseInt(lastRecord.tempFeelsLike - 273.15)}°C</td>\r\n                            <td>{lastRecord.preesure}hPa</td>\r\n                            <td>{lastRecord.humidity}%</td>\r\n                            <td>{lastRecord.windDeg}°</td>\r\n                            <td>{lastRecord.windSpeed}m/s</td>\r\n                            <td>{lastRecord.visibility}m</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n            <div>\r\n                <h6>Latest weather reads</h6>\r\n\r\n                <div>\r\n                    <div style={{display: 'flex', maxWidth: 900, overflowX: 'auto', overflowY: 'hidden'}}>\r\n                        <Chart\r\n                            width={600}\r\n                            height={300}\r\n                            chartType=\"LineChart\"\r\n                            loader={<div>Loading Chart</div>}\r\n                            data={chartData}\r\n                            legendToggle\r\n                        />\r\n                    </div>\r\n\r\n                    <div style={{display: 'flex', maxWidth: 900, overflowX: 'auto', overflowY: 'hidden'}}>\r\n                        <Chart\r\n                            width={600}\r\n                            height={300}\r\n                            chartType=\"LineChart\"\r\n                            loader={<div>Loading Chart</div>}\r\n                            data={chartData2}\r\n                            legendToggle\r\n                            series={{\r\n                                1: {curveType: 'function'}\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherDetails;","import actionsEnv from \"../actionsEnv\";\r\n\r\nexport function getCityWeather(cityId) {\r\n    return fetch(actionsEnv.baseUrl + \"cities/\" + cityId + \"/weather_records\")\r\n        .then(res => res.json());\r\n}","import React from \"react\";\r\nimport './Weather.css';\r\nimport WeatherSidebar from \"./WeatherSidebar\";\r\nimport WeatherDetails from \"./WeatherDetails\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nfunction Weather() {\r\n    const {cityId} = useParams();\r\n\r\n    return (\r\n        <div className=\"Weather\">\r\n\r\n            <div className=\"Weather-sidebar\">\r\n                <h5>Choose your city</h5>\r\n\r\n                {WeatherSidebar()}\r\n            </div>\r\n\r\n            <div className=\"Weather-content\">\r\n                {WeatherDetails(cityId)}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reducer as form } from 'redux-form';\nimport { Route, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport {\n    ConnectedRouter,\n    connectRouter,\n    routerMiddleware\n} from 'connected-react-router';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Layout from \"./components/Layout\";\nimport Weather from \"./components/weather/Weather\";\n\nconst history = createBrowserHistory();\nconst store = createStore(\n    combineReducers({\n        router: connectRouter(history),\n        form,\n    }),\n    applyMiddleware(routerMiddleware(history), thunk)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <Layout>\n                <Switch>\n                    <Route path=\"/\" component={Weather} strict exact/>\n\n                    <Route path=\"/weather/:cityId\" component={Weather} exact/>\n\n                    <Route render={() => <h1>Not Found</h1>}/>\n                </Switch>\n            </Layout>\n        </ConnectedRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}